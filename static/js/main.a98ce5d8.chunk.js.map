{"version":3,"sources":["docs/index.ts","components/node/index.tsx","views/doc/index.tsx","views/home/index.tsx","App.tsx","serviceWorker.ts","index.tsx","docs/CSS/README.md","docs/HTML/README.md","docs/JavaScript/README.md"],"names":["docs","uid","file","name","uri","mdgtaejyhbd4","mdgtaejyngom","mdgtaejynu4r","dids","gtaejyhbd4","gtaejyngom","gtaejynu4r","Node","props","doc","useState","collapse","setCollapse","className","onClick","to","map","d","key","Doc","source","setSource","useEffect","did","match","params","fetch","then","response","text","Home","console","log","location","path","component","App","basename","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"sTAGaA,EAAO,CAClBC,IAAK,aACLC,MAAM,EACNC,KAAM,OACNH,KAAM,CACJ,CACEC,IAAK,aACLC,MAAM,EACNC,KAAM,MACNH,KAAM,CACJ,CAAEC,IAAK,aAAcC,MAAM,EAAME,IAAKC,IAAcF,KAAM,eAG9D,CACEF,IAAK,aACLC,MAAM,EACNC,KAAM,OACNH,KAAM,CACJ,CAAEC,IAAK,aAAcC,MAAM,EAAME,IAAKE,IAAcH,KAAM,eAG9D,CACEF,IAAK,aACLC,MAAM,EACNC,KAAM,aACNH,KAAM,CACJ,CAAEC,IAAK,aAAcC,MAAM,EAAME,IAAKG,IAAcJ,KAAM,iBAKrDK,EAAY,CACvBC,WAAYJ,IACZK,WAAYJ,IACZK,WAAYJ,KAECP,I,cCVAY,MArBf,SAASA,EAAKC,GAAe,IACnBC,EAAQD,EAARC,IADkB,EAEMC,oBAAS,GAFf,mBAEnBC,EAFmB,KAETC,EAFS,KAG1B,OACE,6BACE,yBAAKC,UAAU,YAAYC,QAAS,kBAAMF,GAAaD,KACpDF,EAAIZ,KACH,kBAAC,IAAD,CAAMkB,GAAE,WAAMN,EAAIb,MAAQa,EAAIX,MAE9B,8BAAOW,EAAIX,QAGba,IACCF,EAAIZ,MACLY,EAAId,KAAKqB,KAAI,SAACC,GACZ,OAAO,kBAACV,EAAD,CAAMW,IAAKD,EAAErB,IAAKa,IAAKQ,S,wBCKzBE,MAlBf,SAAaX,GAAe,IAAD,EACGE,mBAAS,IADZ,mBAClBU,EADkB,KACVC,EADU,KAWzB,OATAC,qBAAU,WAAO,IACPC,EAAQf,EAAMgB,MAAMC,OAApBF,IACRG,MAAMvB,EAAKoB,IAAMI,MAAK,SAAAC,GACpBA,EAASC,OAAOF,MAAK,SAAAP,GACnBC,EAAUD,WAGb,CAACZ,EAAMgB,QAGR,6BACE,kBAAC,IAAD,CAAUJ,OAAQA,M,OCATU,MAhBf,SAActB,GAIZ,OAHAc,qBAAU,WACRS,QAAQC,IAAI,OAAQxB,EAAMyB,SAAUzB,EAAMgB,UAG1C,yBAAKX,UAAU,QACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAMJ,IAAKd,KAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,SAAUzB,EAAMyB,SAAUC,KAAK,QAAQC,UAAWhB,O,OCJlDiB,MARf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,kBACf,kBAAC,IAAD,CAAOH,KAAK,KAAKC,UAAWL,MCIdQ,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAAShB,MACvB,2DCZNiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a,mBEjJ5BC,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a98ce5d8.chunk.js","sourcesContent":["import mdgtaejyhbd4 from './CSS/README.md';\nimport mdgtaejyngom from './HTML/README.md';\nimport mdgtaejynu4r from './JavaScript/README.md';\nexport const docs = {\n  uid: 'gtaejynwcv',\n  file: false,\n  name: 'docs',\n  docs: [\n    {\n      uid: 'gtaejyi2pf',\n      file: false,\n      name: 'CSS',\n      docs: [\n        { uid: 'gtaejyhbd4', file: true, uri: mdgtaejyhbd4, name: 'README.md' },\n      ],\n    },\n    {\n      uid: 'gtaejynpai',\n      file: false,\n      name: 'HTML',\n      docs: [\n        { uid: 'gtaejyngom', file: true, uri: mdgtaejyngom, name: 'README.md' },\n      ],\n    },\n    {\n      uid: 'gtaejynvms',\n      file: false,\n      name: 'JavaScript',\n      docs: [\n        { uid: 'gtaejynu4r', file: true, uri: mdgtaejynu4r, name: 'README.md' },\n      ],\n    },\n  ],\n};\nexport const dids: any = {\n  gtaejyhbd4: mdgtaejyhbd4,\n  gtaejyngom: mdgtaejyngom,\n  gtaejynu4r: mdgtaejynu4r,\n};\nexport default docs;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.scss';\n\ntype Props = {\n  doc: any;\n};\n\nfunction Node(props: Props) {\n  const { doc } = props;\n  const [collapse, setCollapse] = useState(true);\n  return (\n    <div>\n      <div className=\"node-item\" onClick={() => setCollapse(!collapse)}>\n        {doc.file ? (\n          <Link to={`/${doc.uid}`}>{doc.name}</Link>\n        ) : (\n          <span>{doc.name}</span>\n        )}\n      </div>\n      {!collapse &&\n        !doc.file &&\n        doc.docs.map((d: any) => {\n          return <Node key={d.uid} doc={d}></Node>;\n        })}\n    </div>\n  );\n}\n\nexport default Node;\n","import React, { useState, useEffect } from 'react';\nimport MarkDown from 'react-markdown';\nimport { dids } from '../../docs';\nimport './index.scss';\n\ntype Props = {\n  match: any;\n  uri: string;\n};\n\nfunction Doc(props: Props) {\n  const [source, setSource] = useState('');\n  useEffect(() => {\n    const { did } = props.match.params;\n    fetch(dids[did]).then(response => {\n      response.text().then(source => {\n        setSource(source);\n      });\n    });\n  }, [props.match]);\n\n  return (\n    <div>\n      <MarkDown source={source} />\n    </div>\n  );\n}\n\nexport default Doc;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport docs from '../../docs';\nimport Node from '../../components/node';\nimport Doc from '../doc';\nimport './index.scss';\n\nfunction Home(props: any) {\n  useEffect(() => {\n    console.log('home', props.location, props.match);\n  });\n  return (\n    <div className=\"home\">\n      <div className=\"menus\">\n        <Node doc={docs}></Node>\n      </div>\n      <Router>\n        <Route location={props.location} path=\"/:did\" component={Doc} />\n      </Router>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './views/home';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router basename=\"/frontend-docs\">\n      <Route path=\"/*\" component={Home} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/README.ab6161aa.md\";","module.exports = __webpack_public_path__ + \"static/media/README.fc35fdc7.md\";","module.exports = __webpack_public_path__ + \"static/media/README.47bce5c7.md\";"],"sourceRoot":""}