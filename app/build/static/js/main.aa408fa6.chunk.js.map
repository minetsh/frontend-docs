{"version":3,"sources":["common/app.ts","docs/index.ts","components/node/index.tsx","views/doc/index.tsx","views/home/index.tsx","App.tsx","serviceWorker.ts","index.tsx","docs/CSS/README.md","docs/HTML/README.md","docs/JavaScript/README.md","docs/JavaScript/npm/package.json.md"],"names":["fetchDocmentSource","uri","a","fetch","response","text","docs","uid","file","name","mdkfuv5vj4cf","mdkfuv5vxvkr","mdkfuv5vz8hd","mdkfuv5vzax3","dids","Node","props","doc","useState","collapse","setCollapse","className","onClick","to","map","d","key","Doc","source","setSource","useEffect","did","match","params","then","Home","console","log","location","path","component","App","basename","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"4RAGaA,EAAkB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACTC,MAAM,GAAD,OAFyB,MAEzB,OAAaF,IADT,cAC1BG,EAD0B,gBAEnBA,EAASC,OAFU,mFAAH,sD,oECClBC,EAAO,CAACC,IAAI,aAAaC,MAAK,EAAMC,KAAK,OAAOH,KAAK,CAAC,CAACC,IAAI,aAAaC,MAAK,EAAMC,KAAK,MAAMH,KAAK,CAAC,CAACC,IAAI,aAAaC,MAAK,EAAKP,IAAIS,IAAaD,KAAK,eAAe,CAACF,IAAI,aAAaC,MAAK,EAAMC,KAAK,OAAOH,KAAK,CAAC,CAACC,IAAI,aAAaC,MAAK,EAAKP,IAAIU,IAAaF,KAAK,eAAe,CAACF,IAAI,aAAaC,MAAK,EAAMC,KAAK,aAAaH,KAAK,CAAC,CAACC,IAAI,aAAaC,MAAK,EAAMC,KAAK,MAAMH,KAAK,IAAI,CAACC,IAAI,aAAaC,MAAK,EAAKP,IAAIW,IAAaH,KAAK,aAAa,CAACF,IAAI,aAAaC,MAAK,EAAMC,KAAK,MAAMH,KAAK,CAAC,CAACC,IAAI,aAAaC,MAAK,EAAKP,IAAIY,IAAaJ,KAAK,yBAC1hBK,EAAY,CAAC,WAAaJ,IAAa,WAAaC,IAAa,WAAaC,IAAa,WAAaC,KACtGP,I,cCyBAS,MAvBf,SAASA,EAAKC,GAAe,IACnBC,EAAQD,EAARC,IADkB,EAEMC,oBAAS,GAFf,mBAEnBC,EAFmB,KAETC,EAFS,KAG1B,OACE,6BACE,yBAAKC,UAAU,YAAYC,QAAS,kBAAMF,GAAaD,KACpDF,EAAIT,KACH,kBAAC,IAAD,CAAMe,GAAE,WAAMN,EAAIV,MAAQU,EAAIR,MAE9B,8BAAOQ,EAAIR,QAGbU,IAAaF,EAAIT,MACjB,yBAAKa,UAAU,mBACZJ,EAAIX,KAAKkB,KAAI,SAACC,GACb,OAAO,kBAACV,EAAD,CAAMW,IAAKD,EAAElB,IAAKU,IAAKQ,U,wBCE3BE,MAdf,SAAaX,GAAe,IAAD,EACGE,mBAAS,IADZ,mBAClBU,EADkB,KACVC,EADU,KAOzB,OALAC,qBAAU,WAAO,IACPC,EAAQf,EAAMgB,MAAMC,OAApBF,IACR/B,EAAmBc,EAAKiB,IAAMG,KAAKL,KAClC,CAACb,EAAMgB,QAGR,6BACE,kBAAC,IAAD,CAAUJ,OAAQA,M,OCGTO,MAhBf,SAAcnB,GAIZ,OAHAc,qBAAU,WACRM,QAAQC,IAAI,OAAQrB,EAAMsB,SAAUtB,EAAMgB,UAG1C,yBAAKX,UAAU,QACb,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAMJ,IAAKX,KAEb,yBAAKe,UAAU,cACb,kBAAC,IAAD,CAAOiB,SAAUtB,EAAMsB,SAAUC,KAAK,QAAQC,UAAWb,O,OCHlDc,MARf,WACE,OACE,kBAAC,IAAD,CAAQC,SLRY,kBKSlB,kBAAC,IAAD,CAAOH,KAAK,KAAKC,UAAWL,MCGdQ,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASb,MACvB,2DCZNc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a,mBEjJ5BC,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.aa408fa6.chunk.js","sourcesContent":["export const basename = '/frontend-docs';\n\nconst prefix = process.env.NODE_ENV === 'production' ? '..' : '';\nexport const fetchDocmentSource = async (uri: string): Promise<string> => {\n  const response = await fetch(`${prefix}${uri}`);\n  return await response.text();\n};\n","import mdkfuv5vj4cf from './CSS/README.md';\nimport mdkfuv5vxvkr from './HTML/README.md';\nimport mdkfuv5vz8hd from './JavaScript/README.md';\nimport mdkfuv5vzax3 from './JavaScript/npm/package.json.md';\nexport const docs = {uid:'kfuv5w580u',file:false,name:'docs',docs:[{uid:'kfuv5vngzv',file:false,name:'CSS',docs:[{uid:'kfuv5vj4cf',file:true,uri:mdkfuv5vj4cf,name:'README.md'}]},{uid:'kfuv5vy93n',file:false,name:'HTML',docs:[{uid:'kfuv5vxvkr',file:true,uri:mdkfuv5vxvkr,name:'README.md'}]},{uid:'kfuv5vzeq5',file:false,name:'JavaScript',docs:[{uid:'kfuv5vyc3q',file:false,name:'ES6',docs:[]},{uid:'kfuv5vz8hd',file:true,uri:mdkfuv5vz8hd,name:'README.md'},{uid:'kfuv5vzbso',file:false,name:'npm',docs:[{uid:'kfuv5vzax3',file:true,uri:mdkfuv5vzax3,name:'package.json.md'}]}]}]};\nexport const dids: any = {'kfuv5vj4cf':mdkfuv5vj4cf,'kfuv5vxvkr':mdkfuv5vxvkr,'kfuv5vz8hd':mdkfuv5vz8hd,'kfuv5vzax3':mdkfuv5vzax3};\nexport default docs;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './index.scss';\n\ntype Props = {\n  doc: any;\n};\n\nfunction Node(props: Props) {\n  const { doc } = props;\n  const [collapse, setCollapse] = useState(false);\n  return (\n    <div>\n      <div className=\"node-item\" onClick={() => setCollapse(!collapse)}>\n        {doc.file ? (\n          <Link to={`/${doc.uid}`}>{doc.name}</Link>\n        ) : (\n          <span>{doc.name}</span>\n        )}\n      </div>\n      {!collapse && !doc.file && (\n        <div className=\"node-item__docs\">\n          {doc.docs.map((d: any) => {\n            return <Node key={d.uid} doc={d}></Node>;\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Node;\n","import React, { useState, useEffect } from 'react';\nimport MarkDown from 'react-markdown';\nimport { dids } from '../../docs';\nimport { fetchDocmentSource } from '../../common/app';\nimport './index.scss';\n\ntype Props = {\n  match: any;\n  uri: string;\n};\n\nfunction Doc(props: Props) {\n  const [source, setSource] = useState('');\n  useEffect(() => {\n    const { did } = props.match.params;\n    fetchDocmentSource(dids[did]).then(setSource);\n  }, [props.match]);\n\n  return (\n    <div>\n      <MarkDown source={source} />\n    </div>\n  );\n}\n\nexport default Doc;\n","import React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport docs from '../../docs';\nimport Node from '../../components/node';\nimport Doc from '../doc';\nimport './index.scss';\n\nfunction Home(props: any) {\n  useEffect(() => {\n    console.log('home', props.location, props.match);\n  });\n  return (\n    <div className=\"home\">\n      <nav className=\"home__navigation\">\n        <Node doc={docs}></Node>\n      </nav>\n      <div className=\"home__docs\">\n        <Route location={props.location} path=\"/:did\" component={Doc} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { basename } from './common/app';\nimport Home from './views/home';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router basename={basename}>\n      <Route path=\"/*\" component={Home} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/README.ab6161aa.md\";","module.exports = __webpack_public_path__ + \"static/media/README.fc35fdc7.md\";","module.exports = __webpack_public_path__ + \"static/media/README.47bce5c7.md\";","module.exports = __webpack_public_path__ + \"static/media/package.json.9138a34f.md\";"],"sourceRoot":""}